/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HeadingDisplayPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var HeadingDisplayPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("Heading Display Plugin loaded!");
    this.registerEvent(
      this.app.vault.on("modify", this.updateFileExplorerDisplay.bind(this))
    );
    this.app.workspace.onLayoutReady(() => {
      this.updateFileExplorerDisplay();
    });
  }
  onunload() {
    console.log("Heading Display Plugin unloaded!");
  }
  /**
   * Updates the File Explorer to show the first heading, or falls back to the filename.
   */
  async updateFileExplorerDisplay() {
    const files = this.app.vault.getFiles();
    for (const file of files) {
      if (!(file instanceof import_obsidian.TFile))
        continue;
      const content = await this.app.vault.cachedRead(file);
      const contentWithoutYaml = this.removeYamlHeader(content);
      const firstHeading = this.getFirstHeading(contentWithoutYaml);
      const fileExplorerElement = document.querySelector(
        `[data-path="${file.path}"] .nav-file-title-content`
      );
      if (fileExplorerElement) {
        fileExplorerElement.textContent = firstHeading || file.basename;
      }
    }
  }
  /**
   * Removes the YAML header from the file content.
   *
   * @param {string} content - The content of the file.
   * @returns {string} - The content without the YAML header.
   */
  removeYamlHeader(content) {
    if (content.startsWith("---")) {
      const yamlEnd = content.indexOf("\n---", 3);
      if (yamlEnd !== -1) {
        return content.slice(yamlEnd + 4).trim();
      }
    }
    return content;
  }
  /**
   * Extracts the first heading from the file content.
   *
   * @param {string} content - The content of the file.
   * @returns {string | null} - The first heading found, or null if none exists.
   */
  getFirstHeading(content) {
    const match = content.match(/^\s*#+\s+(.*)/m);
    return match ? match[1].trim() : null;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgUGx1Z2luLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWFkaW5nRGlzcGxheVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIkhlYWRpbmcgRGlzcGxheSBQbHVnaW4gbG9hZGVkIVwiKTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgRmlsZSBFeHBsb3JlciB3aGVuIGEgZmlsZSBpcyBtb2RpZmllZFxuICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgIHRoaXMuYXBwLnZhdWx0Lm9uKFwibW9kaWZ5XCIsIHRoaXMudXBkYXRlRmlsZUV4cGxvcmVyRGlzcGxheS5iaW5kKHRoaXMpKVxuICAgICk7XG5cbiAgICAvLyBQZXJmb3JtIGluaXRpYWwgdXBkYXRlcyB3aGVuIHRoZSB3b3Jrc3BhY2UgbGF5b3V0IGlzIHJlYWR5XG4gICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGVGaWxlRXhwbG9yZXJEaXNwbGF5KCk7XG4gICAgfSk7XG4gIH1cblxuICBvbnVubG9hZCgpIHtcbiAgICBjb25zb2xlLmxvZyhcIkhlYWRpbmcgRGlzcGxheSBQbHVnaW4gdW5sb2FkZWQhXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIEZpbGUgRXhwbG9yZXIgdG8gc2hvdyB0aGUgZmlyc3QgaGVhZGluZywgb3IgZmFsbHMgYmFjayB0byB0aGUgZmlsZW5hbWUuXG4gICAqL1xuICBhc3luYyB1cGRhdGVGaWxlRXhwbG9yZXJEaXNwbGF5KCkge1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0RmlsZXMoKTtcblxuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgaWYgKCEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkgY29udGludWU7XG5cbiAgICAgIC8vIEdldCB0aGUgZmlyc3QgaGVhZGluZyBmcm9tIHRoZSBmaWxlIGNvbnRlbnRcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5jYWNoZWRSZWFkKGZpbGUpO1xuICAgICAgY29uc3QgY29udGVudFdpdGhvdXRZYW1sID0gdGhpcy5yZW1vdmVZYW1sSGVhZGVyKGNvbnRlbnQpO1xuICAgICAgY29uc3QgZmlyc3RIZWFkaW5nID0gdGhpcy5nZXRGaXJzdEhlYWRpbmcoY29udGVudFdpdGhvdXRZYW1sKTtcblxuICAgICAgLy8gRmluZCB0aGUgY29ycmVzcG9uZGluZyBlbGVtZW50IGluIHRoZSBGaWxlIEV4cGxvcmVyXG4gICAgICBjb25zdCBmaWxlRXhwbG9yZXJFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgICAgICAgYFtkYXRhLXBhdGg9XCIke2ZpbGUucGF0aH1cIl0gLm5hdi1maWxlLXRpdGxlLWNvbnRlbnRgXG4gICAgICApO1xuXG4gICAgICAvLyBVcGRhdGUgdGhlIGRpc3BsYXkgdGV4dCB3aXRoIHRoZSBmaXJzdCBoZWFkaW5nIG9yIHRoZSBmaWxlbmFtZVxuICAgICAgaWYgKGZpbGVFeHBsb3JlckVsZW1lbnQpIHtcbiAgICAgICAgZmlsZUV4cGxvcmVyRWxlbWVudC50ZXh0Q29udGVudCA9IGZpcnN0SGVhZGluZyB8fCBmaWxlLmJhc2VuYW1lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBZQU1MIGhlYWRlciBmcm9tIHRoZSBmaWxlIGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IC0gVGhlIGNvbnRlbnQgb2YgdGhlIGZpbGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IC0gVGhlIGNvbnRlbnQgd2l0aG91dCB0aGUgWUFNTCBoZWFkZXIuXG4gICAqL1xuICByZW1vdmVZYW1sSGVhZGVyKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKGNvbnRlbnQuc3RhcnRzV2l0aChcIi0tLVwiKSkge1xuICAgICAgY29uc3QgeWFtbEVuZCA9IGNvbnRlbnQuaW5kZXhPZihcIlxcbi0tLVwiLCAzKTtcbiAgICAgIGlmICh5YW1sRW5kICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gY29udGVudC5zbGljZSh5YW1sRW5kICsgNCkudHJpbSgpOyAvLyBSZW1vdmUgWUFNTCBibG9ja1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFeHRyYWN0cyB0aGUgZmlyc3QgaGVhZGluZyBmcm9tIHRoZSBmaWxlIGNvbnRlbnQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50IC0gVGhlIGNvbnRlbnQgb2YgdGhlIGZpbGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmcgfCBudWxsfSAtIFRoZSBmaXJzdCBoZWFkaW5nIGZvdW5kLCBvciBudWxsIGlmIG5vbmUgZXhpc3RzLlxuICAgKi9cbiAgZ2V0Rmlyc3RIZWFkaW5nKGNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICAgIC8vIE1hdGNoIHRoZSBmaXJzdCBoZWFkaW5nIG9mIGFueSBsZXZlbCAoIywgIyMsICMjIywgZXRjLilcbiAgICBjb25zdCBtYXRjaCA9IGNvbnRlbnQubWF0Y2goL15cXHMqIytcXHMrKC4qKS9tKTtcbiAgICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXS50cmltKCkgOiBudWxsOyAvLyBSZXR1cm4gdGhlIGhlYWRpbmcgdGV4dCwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE4QjtBQUU5QixJQUFxQix1QkFBckIsY0FBa0QsdUJBQU87QUFBQSxFQUN2RCxNQUFNLFNBQVM7QUFDYixZQUFRLElBQUksZ0NBQWdDO0FBRzVDLFNBQUs7QUFBQSxNQUNILEtBQUssSUFBSSxNQUFNLEdBQUcsVUFBVSxLQUFLLDBCQUEwQixLQUFLLElBQUksQ0FBQztBQUFBLElBQ3ZFO0FBR0EsU0FBSyxJQUFJLFVBQVUsY0FBYyxNQUFNO0FBQ3JDLFdBQUssMEJBQTBCO0FBQUEsSUFDakMsQ0FBQztBQUFBLEVBQ0g7QUFBQSxFQUVBLFdBQVc7QUFDVCxZQUFRLElBQUksa0NBQWtDO0FBQUEsRUFDaEQ7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQUtBLE1BQU0sNEJBQTRCO0FBQ2hDLFVBQU0sUUFBUSxLQUFLLElBQUksTUFBTSxTQUFTO0FBRXRDLGVBQVcsUUFBUSxPQUFPO0FBQ3hCLFVBQUksRUFBRSxnQkFBZ0I7QUFBUTtBQUc5QixZQUFNLFVBQVUsTUFBTSxLQUFLLElBQUksTUFBTSxXQUFXLElBQUk7QUFDcEQsWUFBTSxxQkFBcUIsS0FBSyxpQkFBaUIsT0FBTztBQUN4RCxZQUFNLGVBQWUsS0FBSyxnQkFBZ0Isa0JBQWtCO0FBRzVELFlBQU0sc0JBQXNCLFNBQVM7QUFBQSxRQUNuQyxlQUFlLEtBQUs7QUFBQSxNQUN0QjtBQUdBLFVBQUkscUJBQXFCO0FBQ3ZCLDRCQUFvQixjQUFjLGdCQUFnQixLQUFLO0FBQUEsTUFDekQ7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsaUJBQWlCLFNBQXlCO0FBQ3hDLFFBQUksUUFBUSxXQUFXLEtBQUssR0FBRztBQUM3QixZQUFNLFVBQVUsUUFBUSxRQUFRLFNBQVMsQ0FBQztBQUMxQyxVQUFJLFlBQVksSUFBSTtBQUNsQixlQUFPLFFBQVEsTUFBTSxVQUFVLENBQUMsRUFBRSxLQUFLO0FBQUEsTUFDekM7QUFBQSxJQUNGO0FBQ0EsV0FBTztBQUFBLEVBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVFBLGdCQUFnQixTQUFnQztBQUU5QyxVQUFNLFFBQVEsUUFBUSxNQUFNLGdCQUFnQjtBQUM1QyxXQUFPLFFBQVEsTUFBTSxDQUFDLEVBQUUsS0FBSyxJQUFJO0FBQUEsRUFDbkM7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K
